#!/usr/bin/env bash

#PBS -l walltime=168:0:0
#PBS -r n
#PBS -j oe
#PBS -W umask=002

umask 002


#-----------------------------------------------------#
#                                                     #
# INITIALIZE VARIABLES                                #
#                                                     #
#-----------------------------------------------------#
if [[ -z $SAMPLE ]]; then echo "ERROR: you must supply SAMPLE variable as -v to qsub"; exit 42; fi
if [[ -z $DIR ]]; then echo "ERROR: you must supply DIR variable as -v to qsub"; exit 42; fi
if [[ -z $THREADS ]]; then echo "ERROR: you must supply THREADS variable as -v to qsub"; exit 42; fi
#if [[ -z $MAX_MEM ]]; then echo "ERROR: you must supply MiAX_MEM variable as -v to qsub"; exit 42; fi
if [[ -z $PIPELINE_HOME ]]; then echo "ERROR: you must supply PIPELINE_HOME variable as -v to qsub"; exit 42; fi
if [[ -z $DONE ]]; then echo "ERROR: you must supply DONE variable as -v to qsub"; exit 42; fi
if [[ -z $SFS ]]; then export SFS=0; fi

NAME=pipeline.wgs.part_3_1.stats_QC
echo "****************************************"
echo "* ${NAME}.qsub"
echo "****************************************"
echo "* SAMPLE:        $SAMPLE"
echo "* DIR:           $DIR"
echo "* THREADS:       $THREADS"
#echo "* MAX_MEM:       $MAX_MEM"
echo "* PIPELINE_HOME: $PIPELINE_HOME"
echo "* SFS            $SFS"
echo "* VERBOSE        $VERBOSE"
echo "* DONE:          $DONE"

if [[ -z $BAMFILE ]]; then BAMFILE=$GATK_WGS_BAMFILE; fi
echo "* BAMFILE:       $BAMFILE"

#-----------------------------------------------------#
#                                                     #
# START PIPELINE                                      #
#                                                     #
#-----------------------------------------------------#
cd $DIR
# INIT PIPELINE VARIABLES
. $PIPELINE_HOME/data/templates/init_pipeline.sh $PIPELINE_HOME
# DEFINING PIPELINE SPECIFIC VARIABLES
# LOAD FUNCTION LIBRARY
. $PIPELINE_HOME/data/templates/function.library
# INIT THE SAMPLE
set_verbose $VERBOSE
sample_init $SAMPLE $DIR
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE PROBLEM"; exit 42; fi
echo "* BED:           $BED"
echo "* BED_FLANK:     $BED_FLANK"
echo "****************************************"

##########################################
## FULL PIPELINE - WGS
echo "*** STARTING STATS AND QC"
##########################################
cd $DIR

## METRICS
#create hash tables to hold process id, exit status and .done filenames for all parallel processes in this step
donefile_DofC_WGS=.${SAMPLE}.${NAME}.DofC_WGS.done
donefile_DofC_RefSeq=.${SAMPLE}.${NAME}.DofC_RefSeq.done
donefile_flagstat=.${SAMPLE}.${NAME}.flagstat.done
donefile_verifyBamID=.${SAMPLE}.${NAME}.verifyBamID.done

#execute jobs
if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name "$DONE"` ]]; then
  if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name $donefile_DofC_WGS` ]]; then
    if [ $VERBOSE ]; then echo "****** CMD: sample_metrics_DepthOfCoverage $REF $BAMFILE $SAMPLE.WGS"; fi
    sample_metrics_DepthOfCoverage $REF $BAMFILE ${SAMPLE}.WGS 2>&1 > ${SAMPLE}.${NAME}.WGS.out & process_DofC_WGS=${!}
  fi
  if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name $donefile_DofC_RefSeq` ]]; then
    if [ $VERBOSE ]; then echo "****** CMD: sample_metrics_DepthOfCoverage $REF $BAMFILE ${SAMPLE}.RefSeq_genes $GENE_BED $GENE_LIST"; fi
    sample_metrics_DepthOfCoverage $REF $BAMFILE ${SAMPLE}.RefSeq_genes $GENE_BED $GENE_LIST 2>&1 > ${SAMPLE}.${NAME}.RefSeq_genes.out & process_DofC_RefSeq=${!}
  fi
  if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name $donefile_flagstat` ]]; then
    if [ $VERBOSE ]; then echo "****** CMD: sample_metrics_flagstat ${BAMFILE} ${GATK_WGS_PREFIX}.${SAMPLE}.flagstat"; fi
    sample_metrics_flagstat ${BAMFILE} ${BAMFILE}.flagstat 2>&1 > ${SAMPLE}.${NAME}.flagstat.out & process_flagstat=${!}
  fi
  if [[ $SFS -eq 1 || ! `find ./ -name $donefile_verifyBamID` ]]; then
    if [ $VERBOSE ]; then echo "****** CMD: sample_metrics_verifyBamID ${BAMFILE} ${GATK_EXOME_PREFIX}.${SAMPLE}.verifyBamID";fi
    sample_metrics_verifyBamID ${BAMFILE} ${BAMFILE}.verifyBamID 2>&1 > ${SAMPLE}.${NAME}.verifyBamID.out & process_verifyBamID=${!}
  fi

  #iterate over each sub-run to get exit status and create .done file (if job succeeded); track overall METRICS step failure
  unset failure
  run=DofC_WGS
  if [ $process_DofC_WGS ]; then 
    wait $process_DofC_WGS; status=$?
    if [ $VERBOSE ]; then echo "run=$run"; echo "process id: $process_DofC_WGS"; echo "exit status: $status"; echo "donefile: $donefile_DofC_WGS"; fi
    if [ $status -eq 0 ]; then echo sub-run $run SUCCESS; touch $donefile_DofC_WGS; else echo "*** $run run failed"; failure=1; fi
  else 
    echo "SKIPPED sub-run $run"
  fi

  run=DofC_RefSeq
  if [ $process_DofC_RefSeq ]; then 
    wait $process_DofC_RefSeq; status=$?
    if [ $VERBOSE ]; then echo "run=$run"; echo "process id: $process_DofC_RefSeq"; echo "exit status: $status"; echo "donefile: $donefile_DofC_RefSeq"; fi
    if [ $status -eq 0 ]; then echo sub-run $run SUCCESS; touch $donefile_DofC_RefSeq; else echo "*** $run run failed"; failure=1; fi
  else
    echo "SKIPPED sub-run $run"
  fi

  run=flagstat
  if [ $process_flagstat ]; then 
    wait $process_flagstat; status=$?
    if [ $VERBOSE ]; then echo "run=$run"; echo "process id: $process_flagstat"; echo "exit status: $status"; echo "donefile: $donefile_flagstat"; fi
    if [ $status -eq 0 ]; then echo sub-run $run SUCCESS; touch $donefile_flagstat; else echo "*** $run run failed"; failure=1; fi
  else
    echo "SKIPPED sub-run $run"
  fi

  run=verifyBamID
  if [ $process_DofC_WGS ]; then 
    wait $process_DofC_WGS; status=$?
    if [ $VERBOSE ]; then echo "run=$run"; echo "process id: $process_verifyBamID"; echo "exit status: $status"; echo "donefile: $donefile_verifyBamID"; fi
    if [ $status -eq 0 ]; then echo sub-run $run SUCCESS; touch $donefile_verifyBamID; else echo "*** $run run failed"; failure=1; fi
  else
    echo "SKIPPED sub-run $run"
  fi

  #create .done file for entire METRICS step, if all sub-jobs ran successfully
  if [ $failure ]; then exit 42; else touch $DONE; if [ $VERBOSE ]; then echo SUCCESS; fi; fi
else 
  if [ $VERBOSE ]; then echo "****** SKIP Metrics"; fi
fi
