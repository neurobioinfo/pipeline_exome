#!/usr/bin/env bash

#PBS -l walltime=168:0:0
#PBS -r n

#PBS -W umask=002

umask 002

#-----------------------------------------------------#
#                                                     #
# INITIALIZE VARIABLES                                #
#                                                     #
#-----------------------------------------------------#
if [[ -z $SAMPLE ]]; then echo "ERROR: you must supply SAMPLE variable as -v to qsub"; exit 42; fi
if [[ -z $DIR ]]; then echo "ERROR: you must supply DIR variable as -v to qsub"; exit 42; fi
if [[ -z $THREADS ]]; then echo "ERROR: you must supply THREADS variable as -v to qsub"; exit 42; fi
#if [[ -z $MAX_MEM ]]; then echo "ERROR: you must supply MiAX_MEM variable as -v to qsub"; exit 42; fi
if [[ -z $PIPELINE_HOME ]]; then echo "ERROR: you must supply PIPELINE_HOME variable as -v to qsub"; exit 42; fi
if [[ -z $DONE ]]; then echo "ERROR: you must supply DONE variable as -v to qsub"; exit 42; fi
if [[ -z $SFS ]]; then export SFS=0; fi

NAME=pipeline.wgs.part_3_2.GATK_UG
echo "****************************************"
echo "* ${NAME}.qsub"
echo "****************************************"
echo "* SAMPLE:        $SAMPLE"
echo "* DIR:           $DIR"
echo "* THREADS:       $THREADS"
#echo "* MAX_MEM:       $MAX_MEM"
echo "* PIPELINE_HOME: $PIPELINE_HOME"
echo "* SFS            $SFS"
echo "* VERBOSE        $VERBOSE"
echo "* DONE:          $DONE"




#-----------------------------------------------------#
#                                                     #
# START PIPELINE                                      #
#                                                     #
#-----------------------------------------------------#
cd $DIR
# INIT PIPELINE VARIABLES
. $PIPELINE_HOME/data/templates/init_pipeline.sh $PIPELINE_HOME
# DEFINING PIPELINE SPECIFIC VARIABLES
# LOAD FUNCTION LIBRARY
. $PIPELINE_HOME/data/templates/function.library
# INIT THE SAMPLE
set_verbose $VERBOSE
sample_init $SAMPLE $DIR
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE PROBLEM"; exit 42; fi
if [[ -z $VCFFILE ]]; then VCFFILE=$GATK_WGS_VCFFILE; fi
echo "* VCFFILE:       $VCFFILE"
if [[ -z $BAMFILE ]]; then BAMFILE=$GATK_WGS_BAMFILE; fi
echo "* BAMFILE:       $BAMFILE"
if [[ -z $DOWNSAMPLE ]]; then DOWNSAMPLE=$GATK_WGS_DOWNSAMPLE; fi
echo "* DOWNSAMPLE:    $DOWNSAMPLE"

echo "* BED:           $BED"
echo "* BED_FLANK:     $BED_FLANK"
echo "****************************************"

##########################################
## FULL PIPELINE - WGS
echo "*** STARTING VARIANT CALLING AND ANNOTATION"
##########################################
cd $DIR

donefile_GATK_UG=.${SAMPLE}.${NAME}.GATK_UG.done
donefile_ANNOVAR=.${SAMPLE}.${NAME}.ANNOVAR.done
donefile_compress=.${SAMPLE}.${NAME}.compress.done

#execute jobs
unset failure
if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name $DONE` ]]; then
  if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name $donefile_GATK_UG` ]]; then
    if [ $VERBOSE ]; then echo "****** CMD: sample_genome_variant_calling  $BAMFILE $VCFFILE $DOWNSAMPLE"; fi
    sample_genome_variant_calling  $BAMFILE $VCFFILE $DOWNSAMPLE 2>&1 > ${SAMPLE}.GATK_UG.out
    if [ $? -eq 0 ]; then echo sub-run sample_genome_variant_calling SUCCESS; touch $donefile_GATK_UG; else echo "*** sub-run sample_genome_variant_calling failed"; failure=1; fi
  else
    if [ $VERBOSE ]; then echo "****** SKIP variant calling"; fi
  fi
  if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name $donefile_ANNOVAR` ]]; then
    if [ $VERBOSE ]; then echo "****** CMD: sample_annotate_vcf $VCFFILE v37 gatk"; fi
    sample_annotate_vcf $VCFFILE v37 gatk 2>&1 > ${SAMPLE}.ANNOVAR.out
    if [ $? -eq 0 ]; then echo sub-run sample_annotate_vcf SUCCESS; touch $donefile_ANNOVAR; else echo "*** sub-run sample_annotate_vcf failed"; failure=1; fi
  else
    if [ $VERBOSE ]; then echo "****** SKIP variant annotation"; fi
  fi
  
else
  if [ $VERBOSE ]; then echo "****** SKIP Variant calling and annotation"; fi
fi

#create .done file for entire VARIANT CALLING AND ANNOTATION step, if all sub-jobs ran successfully
if [ $failure ]; then exit 42; else touch $DONE; if [ $VERBOSE ]; then echo SUCCESS; fi; fi
