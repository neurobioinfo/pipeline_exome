#!/usr/bin/env bash

#PBS -l walltime=168:0:0
#PBS -r n
#PBS -j oe
#PBS -W umask=002

umask 002

#-----------------------------------------------------#
#                                                     #
# INITIALIZE VARIABLES                                #
#                                                     #
#-----------------------------------------------------#
if [[ -z $SAMPLE ]]; then echo "ERROR: you must supply SAMPLE variable as -v to qsub"; exit 42; fi
if [[ -z $DIR ]]; then echo "ERROR: you must supply DIR variable as -v to qsub"; exit 42; fi
if [[ -z $THREADS ]]; then echo "ERROR: you must supply THREADS variable as -v to qsub"; exit 42; fi
#if [[ -z $MAX_MEM ]]; then echo "ERROR: you must supply MiAX_MEM variable as -v to qsub"; exit 42; fi
if [[ -z $PIPELINE_HOME ]]; then echo "ERROR: you must supply PIPELINE_HOME variable as -v to qsub"; exit 42; fi
if [[ -z $DONE ]]; then echo "ERROR: you must supply DONE variable as -v to qsub"; exit 42; fi
if [[ -z $SFS ]]; then export SFS=0; fi
if [[ -z $KEEP_INTERMEDIATES ]]; then export KEEP_INTERMEDIATES=0; fi

echo "***************************************"
echo "* pipeline.exome.part_4_1.cleanup.qsub"
echo "***************************************"
echo "* SAMPLE:        $SAMPLE"
echo "* DIR:           $DIR"
echo "* THREADS:       $THREADS"
#echo "* MAX_MEM:       $MAX_MEM"
echo "* PIPELINE_HOME: $PIPELINE_HOME"
#echo "* OUTPUTDIR:     $OUTPUTDIR"
echo "* SFS            $SFS"
echo "* KEEP_INTER     $KEEP_INTERMEDIATES"
echo "* VERBOSE        $VERBOSE"
echo "* DONE:          $DONE"
echo "***************************************"

#-----------------------------------------------------#
#                                                     #
# START PIPELINE                                      #
#                                                     #
#-----------------------------------------------------#
cd $DIR
# INIT PIPELINE VARIABLES
. $PIPELINE_HOME/data/templates/init_pipeline.sh $PIPELINE_HOME
# DEFINING PIPELINE SPECIFIC VARIABLES
# LOAD FUNCTION LIBRARY
. $PIPELINE_HOME/data/templates/function.library
# INIT THE SAMPLE
set_verbose $VERBOSE
sample_init $SAMPLE $DIR

##########################################
## FULL PIPELINE - EXOME
echo "*** STARTING RUN CLEANUP"
##########################################
cd $DIR

## CLEANUP STAGE
if [ $VERBOSE ]; then 
echo "****** CMD: sample_cleanup"; 
#echo "****** RAWDIR: \"${RAWDIR}\"";
fi

#dan removed 2013-11-08: most runs are not on briaree; files must be transferred manually to briaree1:NGS_OUTPUTS
#links to ngs outputs
#if [[ -d $OUTPUTDIR ]]; then
#  ln $GATK_BAMFILE_MT_FILTERED $OUTPUTDIR
#  ln $GATK_EXOME_BAMFILE $OUTPUTDIR
#  cp -af fastqc $OUTPUTDIR
#  # TBC...
#fi

find -perm 600 -exec chmod 664 \{\} \;

#move logs and change perms
mkdir LOGS
mv -v *.o[0-9]* *.out *.stderr Exome.DataProcessingPipeline.*.txt MT.DataProcessingPipeline.*.txt LOGS

#move stats files
mkdir STATS
mv -v DepthOfCoverage.* *.metrics *.flagstat *.vs.*.csv *.verifyBamID.* fastqc.* STATS 

#remove unused files
if [[ $KEEP_INTERMEDIATES -eq 0 ]]; then 
  rm -rfv temp; 
  rm -vf *fq.trim*.gz
  find . -empty -type f -exec rm -v \{\} \;
  echo "Compressing files"
  tar czvf SMALL_FILES.tar.gz `echo \
   $(find . -maxdepth 1 -type f -size -1024k) \
   $(find -name "MT.*.ba*") \
   $(find -name "*non_pri_aln.ba*") \
   LOGS STATS | \
   sed -e 's/ /\n/g' | sed -e '/gz$/d' | sort | uniq` #keep uniq files, excluding archives .gz
  rm -rfv `echo \
   $(find . -maxdepth 1 -type f -size -1024k) \
   $(find -name "MT.*.ba*") \
   $(find -name "*non_pri_aln.ba*") \
   LOGS STATS | \
   sed -e 's/ /\n/g' | sed -e '/gz$/d' | sort | uniq` 
fi

if [ $? -eq 0 ]; then touch $DONE; if [ $VERBOSE ]; then echo SUCCESS; fi; else exit 42; fi

echo "*** EXOME PIPELINE FINISHED SUCCESSFULLY"
