#!/bin/bash
#PBS -lnodes=1:ppn=12 -lwalltime=6:0:0
#PBS -j oe
#PBS -r n
#PBS -W umask=002

umask 002

#-----------------------------------------------------#
#                                                     #
# INITIALIZE VARIABLES                                #
#                                                     #
#-----------------------------------------------------#
if [[ -z $SAMPLE ]]; then echo "ERROR: you must supply SAMPLE variable as -v to qsub"; exit 42; fi
if [[ -z $DIR ]]; then echo "ERROR: you must supply DIR variable as -v to qsub"; exit 42; fi
if [[ -z $THREADS ]]; then echo "ERROR: you must supply THREADS variable as -v to qsub"; exit 42; fi
if [[ -z $MAX_MEM ]]; then echo "ERROR: you must supply MAX_MEM variable as -v to qsub"; exit 42; fi
if [[ -z $PIPELINE_HOME ]]; then echo "ERROR: you must supply PIPELINE_HOME variable as -v to qsub"; exit 42; fi
if [[ -z $BAM ]]; then echo "ERROR: you must supply BAM variable as -v to qsub"; exit 42; fi
if [[ -z $DONE ]]; then echo "ERROR: you must supply DONE variable as -v to qsub"; exit 42; fi
if [[ -z $SFS ]]; then export SFS=0; fi

echo "*******************************************"
echo "* pipeline.generic.part_0_0.samToFastq"
echo "*******************************************"
echo "* SAMPLE:               $SAMPLE"
echo "* DIR:                  $DIR"
echo "* THREADS:              $THREADS"
echo "* MAX_MEM:              $MAX_MEM"
echo "* PIPELINE_HOME:        $PIPELINE_HOME"
echo "* BAM:                  $BAM"
echo "* SFS                   $SFS"
echo "* VERBOSE               $VERBOSE"
echo "* DONE:                 $DONE"
echo "*******************************************"

#-----------------------------------------------------#
# START PIPELINE                                      #
#-----------------------------------------------------#
cd $DIR
# INIT PIPELINE VARIABLES
. $PIPELINE_HOME/data/templates/init_pipeline.sh $PIPELINE_HOME
# DEFINING PIPELINE SPECIFIC VARIABLES
# LOAD FUNCTION LIBRARY
. $PIPELINE_HOME/data/templates/function.library
# INIT THE SAMPLE
set_verbose $VERBOSE
sample_init $SAMPLE $DIR

##########################################
## FULL PIPELINE - EXOME
echo "*** STARTING TRIMMOMATIC"
##########################################
cd $DIR

if [[ -z $BAM || ! -e $BAM ]]; then echo "input bamfile ($BAM as -v to qsub) not specified or does not exist"; exit 42; fi

#execute jobs
unset failure
if [[ $SFS -eq 1 || ! `find ./ -maxdepth 1 -name $DONE` ]]; then
    if [ $VERBOSE ]; then echo "****** CMD: sample_SAM_to_fastq $BAM ${BAM}_read1.fastq.gz ${BAM}_read2.fastq.gz ${BAM}_unpaired.fastq.gz"; fi
    sample_SAM_to_fastq $BAM ${BAM}_read1.fastq.gz ${BAM}_read2.fastq.gz ${BAM}_unpaired.fastq.gz
    if [ $? -eq 0 ]; then echo sub-run sample_SAM_to_fastq SUCCESS; else echo "*** sub-run sample_SAM_to_fastq failed"; failure=1; fi
#    if [ $VERBOSE ]; then echo "****** CMD: pigz -fp $THREADS ${BAM}_read1.fastq"; fi
#    pigz -fp $THREADS ${BAM}_read1.fastq
#    if [ $? -eq 0 ]; then echo sub-run pigz read1 SUCCESS; else echo "sub-run pigz read1 failed"; failure=1; fi
#    if [ $VERBOSE ]; then echo "****** CMD: pigz -fp $THREADS ${BAM}_read2.fastq"; fi
#    pigz -fp $THREADS ${BAM}_read2.fastq
#    if [ $? -eq 0 ]; then echo sub-run pigz read1 SUCCESS; else echo "sub-run pigz read2 failed"; failure=1; fi
else
  if [ $VERBOSE ]; then echo "****** SKIP samToFastq"; fi
fi

#create .done file for entire VARIANT CALLING AND ANNOTATION step, if all sub-jobs ran successfully
if [ $failure ]; then exit 42; else touch $DONE; if [ $VERBOSE ]; then echo SUCCESS; fi; fi
