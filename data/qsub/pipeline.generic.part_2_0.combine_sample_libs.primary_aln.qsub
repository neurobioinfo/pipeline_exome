#!/usr/bin/env bash

#PBS -l walltime=168:0:0
#PBS -r n
#PBS -j oe
#PBS -W umask=002

umask 002

#-----------------------------------------------------#
#                                                     #
# INITIALIZE VARIABLES                                #
#                                                     #
#-----------------------------------------------------#
if [[ -z $SAMPLE ]]; then echo "ERROR: you must supply SAMPLE variable as -v to qsub"; exit 42; fi
if [[ -z $DIR ]]; then echo "ERROR: you must supply DIR variable as -v to qsub"; exit 42; fi
if [[ -z $THREADS ]]; then echo "ERROR: you must supply THREADS variable as -v to qsub"; exit 42; fi
#if [[ -z $MAX_MEM ]]; then echo "ERROR: you must supply MiAX_MEM variable as -v to qsub"; exit 42; fi
if [[ -z $PIPELINE_HOME ]]; then echo "ERROR: you must supply PIPELINE_HOME variable as -v to qsub"; exit 42; fi
if [[ -z $DONE ]]; then echo "ERROR: you must supply DONE variable as -v to qsub"; exit 42; fi
if [[ -z $SFS ]]; then export SFS=0; fi
if [[ -z $KEEP_INTERMEDIATES ]]; then export KEEP_INTERMEDIATES=0; fi
if [[ -z $MERGE_SORT_SAMS ]]; then echo "ERROR: you must supply MERGE_SORT_SAMS variable as -v to qsub"; exit 42; fi
if [[ -z $MERGE_SORT_BAM ]]; then echo "ERROR: you must supply MERGE_SORT_BAM variable as -v to qsub"; exit 42; fi
if [[ -z $MERGE_SORT_BAM_NON_PRIMARY_ALN ]]; then echo "ERROR: you must supply MERGE_SORT_BAM_NON_PRIMARY_ALN variable as -v to qsub"; exit 42; fi

echo "****************************************************************"
echo "* pipeline.generic.part_2_0.combine_sample_libs.primary_aln.qsub"
echo "****************************************************************"
echo "* SAMPLE:                         $SAMPLE"
echo "* DIR:                            $DIR"
echo "* THREADS:                        $THREADS"
#echo "* MAX_MEM:                        $MAX_MEM"
echo "* PIPELINE_HOME:                  $PIPELINE_HOME"
echo "* DONE:                           $DONE"
echo "* MERGE_SORT_SAMS:                $MERGE_SORT_SAMS"
echo "* MERGE_SORT_BAM:                 $MERGE_SORT_BAM"
echo "* MERGE_SORT_BAM_NON_PRIMARY_ALN: $MERGE_SORT_BAM_NON_PRIMARY_ALN"
echo "***************************************************"

#-----------------------------------------------------#
#                                                     #
# START PIPELINE                                      #
#                                                     #
#-----------------------------------------------------#
cd $DIR
# INIT PIPELINE VARIABLES
. $PIPELINE_HOME/data/templates/init_pipeline.sh $PIPELINE_HOME
# DEFINING PIPELINE SPECIFIC VARIABLES
# LOAD FUNCTION LIBRARY
. $PIPELINE_HOME/data/templates/function.library
# INIT THE SAMPLE
set_verbose $VERBOSE
sample_init $SAMPLE $DIR
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE PROBLEM"; exit 42; fi

##########################################
## FULL PIPELINE - EXOME
echo "*** MERGE AND SORT ALIGNMENTS"
##########################################
cd $DIR

# Merge samples lanes
TMP_MERGE_BAM=${MERGE_SORT_BAM}.TMP_MERGE.bam
if [ $VERBOSE ]; then echo "****** CMD: sample_mergeSort_BAMs $MERGE_SORT_SAMS $TMP_MERGE_BAM"; fi
sample_mergeSort_BAMs $MERGE_SORT_SAMS $TMP_MERGE_BAM
if [ $? -ne 0 ]; then echo "sample_mergeSort_BAMs failed"; exit 42; fi

if [ $VERBOSE ]; then echo "****** CMD: sample_remove_non_primary_aln $TMP_MERGE_BAM $MERGE_SORT_BAM"; fi
sample_remove_non_primary_aln $TMP_MERGE_BAM $MERGE_SORT_BAM
if [ $? -ne 0 ]; then echo "sample_remove_non_primary_aln failed"; exit 42; fi

if [ $VERBOSE ]; then echo "****** CMD: sample_keep_non_primary_aln $TMP_MERGE_BAM $MERGE_SORT_BAM_NON_PRIMARY_ALN"; fi
sample_keep_non_primary_aln $TMP_MERGE_BAM $MERGE_SORT_BAM_NON_PRIMARY_ALN
if [ $? -eq 0 ]; then 
  if [[ $KEEP_INTERMEDIATES -eq 0 ]]; then TO_DEL=`echo $MERGE_SORT_SAMS | sed 's/@INPUT=/ /g'`; rm -fv $TO_DEL $TMP_MERGE_BAM $TMP_MERGE_BAM.bai; fi
  touch $DONE;
  if [ $VERBOSE ]; then echo SUCCESS; fi;  
else echo "sample_keep_non_primary_aln failed"; exit 42; fi
