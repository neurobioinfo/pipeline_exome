#!/bin/bash

##########################################
## GLOBAL CONSTANTS
## initialized in the init_pipeline
##########################################

##########################################
## GLOBAL VARIABLES
##########################################
FUNCTION_LIBRARY_INIT=0

sample_init() {
############################################
# Init
echo "*** INITIALIZE SAMPLE'S VARIABLES"
#############################################
SAMPLE=$1
RUN_DIR=$2
if [[ -z $SAMPLE || -z $RUN_DIR ]]; then echo "sample_init (SAMPLE,RUN_DIR) missing args"; return 42; fi
export SAMPLE RUN_DIR;
export FUNCTION_LIBRARY_INIT=1;
export TEMP_DIR=$RUN_DIR/temp
export VERBOSE=0

mkdir $TEMP_DIR 2>/dev/null
return 0
}

set_verbose() {
############################################
# set_verbose
echo "*** SET VERBOSE TO \"$1\""
#############################################
export VERBOSE=$1
return 0
}

sample_SAM_to_fastq() {
#################################################
# SAM to fastq
echo "*** RUNNING SAM/BAM TO FASTQ"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local BAM=$1
local FASTQ1=$2
local FASTQ2=$3
local FASTQ_unpaired=$4
if [[ -z $BAM || -z $FASTQ1 || -z $FASTQ2 || -z $FASTQ_unpaired ]]; then echo "sample_SAM_to_fastq (BAM,FASTQ1,FASTQ2,FASTQ_unpaired) missing args"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** sample_SAM_to_fastq CMD\n\
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar SamToFastq \
  VALIDATION_STRINGENCY=SILENT \
  TMP_DIR=$TEMP_DIR \
  INPUT=$BAM \
  FASTQ=$FASTQ1 \
  SECOND_END_FASTQ=$FASTQ2 \
  UNPAIRED_FASTQ=$FASTQ_unpaired"
fi

#run the picard script
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar SamToFastq \
  VALIDATION_STRINGENCY=SILENT \
  TMP_DIR=$TEMP_DIR \
  INPUT=$BAM \
  FASTQ=$FASTQ1 \
  SECOND_END_FASTQ=$FASTQ2 \
  UNPAIRED_FASTQ=$FASTQ_unpaired

return $?
}

sample_split_fastq() {
#################################################
# Split Fastq file in chunks
echo "*** RUNNING SPLIT FASTQ TO CHUNKS"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ=$1
local PREFIX=$2
local LINES=$3
if [[ -z $FASTQ || -z $PREFIX || -z $LINES ]]; then echo "sample_split_fastq (FASTQ,PREFIX,LINES) missing args"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** sample_split_fastq CMD\n split -d -a 4 -l $LINES $FASTQ $PREFIX"; fi

split -d -a 4 -l $LINES $FASTQ $PREFIX

return $?
}

sample_merge_fastq() {
#################################################
# Merge Fastq files
echo "*** RUNNING MERGE FASTQ FILES"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ_PATTERN=$1
local OUTPUT_FILE=$2
local UNCOMPRESSED=$3
if [[ -z $FASTQ_PATTERN || -z $OUTPUT_FILE ]]; then echo "sample_merge_fastq (FASTQ_PATTERN,OUTPUT_FILE,UNCOMPRESSED) missing args"; return 42; fi
CMD=zcat
if [[ $UNCOMPRESSED ]]; then CMD=cat; fi

if [ $VERBOSE ]; then echo -e "****** sample_merge_fastq CMD\n $CMD *$FASTQ_PATTERN* | pigz > $OUTPUT_FILE"; fi

$CMD *$FASTQ_PATTERN* | pigz > $OUTPUT_FILE

return $?
}


sample_trimmomatic_preprocessing_w_outputs() {
###################################################
# Data Pre Processing
echo "*** RUNNING SAMPLE TRIMMOMATIC PREPROCESSING"
###################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ1=$1
local FASTQ2=$2
local TRIM_PAIRED_FASTQ1=$3
local TRIM_PAIRED_FASTQ2=$4
local TRIM_UNPAIRED_FASTQ1=$5
local TRIM_UNPAIRED_FASTQ2=$6
local ENCODING=$7
local ADAPTERS=$8
local CROP_COMMAND=$9
if [[ ! -a $FASTQ1 || ! -a $FASTQ2 || `dirname $FASTQ1` != `dirname $FASTQ2` || -z $ENCODING || -z $TRIM_PAIRED_FASTQ1 || -z $TRIM_PAIRED_FASTQ2 || -z $TRIM_UNPAIRED_FASTQ1 || -z $TRIM_UNPAIRED_FASTQ2 ]]; then
  echo "sample_trimmomatic_preprocessing_w_outputs (FASTQ1,FASTQ2,TRIM_PAIRED_FASTQ1,TRIM_PAIRED_FASTQ2,TRIM_UNPAIRED_FASTQ1,TRIM_UNPAIRED_FASTQ2,ENCODING,[ADAPTERS]) missing args";
  return 42;
fi
if [[ ! -e $FASTQ1 || ! -e $FASTQ2 ]]; then echo "sample_trimmomatic_preprocessing_w_outputs() FASTQ file $FASTQ1 or $FASTQ2 not found"; return 42; fi
if [[ $ADAPTERS ]]; then
  if [[ ! -e $ADAPTERS ]]; then
    echo "sample_trimmomatic_preprocessing_w_outputs() ADAPTERS file $ADAPTERS not found"; return 42;
  else
     local ADAPTERSARG="ILLUMINACLIP:${ADAPTERS}:2:40:15"
  fi
fi
if [[ $ENCODING != 33 && $ENCODING != 64 ]]; then echo "sample_trimmomatic_preprocessing_w_outputs() encoding must be 33 or 64"; return 42; fi

echo "****** LAUNCHING CLIP/TRIM/CONVERT ON BOTH READ FILES"
if [ $VERBOSE ]; then echo -e "****** sample_trimmomatic_preprocessing_w_outputs CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=${TEMP_DIR} \
  -classpath $TRIMMOMATIC_JAR org.usadellab.trimmomatic.TrimmomaticPE \
  -threads $THREADS \
  -phred${ENCODING} \
  $FASTQ1 $FASTQ2 \
  ${TRIM_PAIRED_FASTQ1} \
  ${TRIM_UNPAIRED_FASTQ1} \
  ${TRIM_PAIRED_FASTQ2} \
  ${TRIM_UNPAIRED_FASTQ2} \
  TOPHRED33 \
  $ADAPTERSARG \
  LEADING:3 \
  TRAILING:3 \
  SLIDINGWINDOW:4:15 \
  MINLEN:36 \
  ${CROP_COMMAND}" 
fi

java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=${TEMP_DIR} \
  -classpath ${TRIMMOMATIC_JAR} org.usadellab.trimmomatic.TrimmomaticPE \
  -threads $THREADS \
  -phred${ENCODING} \
  $FASTQ1 $FASTQ2 \
  ${TRIM_PAIRED_FASTQ1} \
  ${TRIM_UNPAIRED_FASTQ1} \
  ${TRIM_PAIRED_FASTQ2} \
  ${TRIM_UNPAIRED_FASTQ2} \
  TOPHRED33 \
  $ADAPTERSARG \
  LEADING:3 \
  TRAILING:3 \
  SLIDINGWINDOW:4:15 \
  MINLEN:36 \
  ${CROP_COMMAND}

return $? 
}


sample_fastqc() {
###################################################
# Data Pre Processing
echo "*** RUNNING SAMPLE FASTQC"
###################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ1=$1
local FASTQ2=$2
local TRIM_PAIRED_FASTQ1=$3
local TRIM_PAIRED_FASTQ2=$4
local TRIM_UNPAIRED_FASTQ1=$5
local TRIM_UNPAIRED_FASTQ2=$6
local FASTQC_OUTPUT_DIR=$7
if [[ ! -a $FASTQ1 || ! -a $FASTQ2 || `dirname $FASTQ1` != `dirname $FASTQ2` || -z $FASTQC_OUTPUT_DIR || -z $TRIM_PAIRED_FASTQ1 || -z $TRIM_PAIRED_FASTQ2 || -z $TRIM_UNPAIRED_FASTQ1 || -z $TRIM_UNPAIRED_FASTQ2 ]]; then
  echo "sample_fastqc (FASTQ1,FASTQ2,TRIM_PAIRED_FASTQ1,TRIM_PAIRED_FASTQ2,TRIM_UNPAIRED_FASTQ1,TRIM_UNPAIRED_FASTQ2,FASTQC_OUTPUT_DIR) missing args";
  return 42;
fi
if [[ ! -e $FASTQ1 || ! -e $FASTQ2 ]]; then echo "sample_fastqc() FASTQ file $FASTQ1 or $FASTQ2 not found"; return 42; fi

echo "****** GENERATING FASTQC QUALITY REPORTS"
if [ $VERBOSE ]; then echo -e "****** sample_fastqc CMD\n\
fastqc -o $FASTQC_OUTPUT_DIR -t 6 \
  $FASTQ1 \
  $FASTQ2 \
  ${TRIM_PAIRED_FASTQ1} \
  ${TRIM_PAIRED_FASTQ2} \
  ${TRIM_UNPAIRED_FASTQ1} \
  ${TRIM_UNPAIRED_FASTQ2}"
fi

mkdir -p $FASTQC_OUTPUT_DIR
fastqc -o $FASTQC_OUTPUT_DIR -t 6 \
  $FASTQ1 \
  $FASTQ2 \
  ${TRIM_PAIRED_FASTQ1} \
  ${TRIM_PAIRED_FASTQ2} \
  ${TRIM_UNPAIRED_FASTQ1} \
  ${TRIM_UNPAIRED_FASTQ2}

return $?
}

#sample_BWA_align() {
##################################################
## BWA Alignment
#echo "*** RUNNING BWA ALIGNMENT"
##################################################
#if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
#cd $RUN_DIR
#local FASTQ1=$1
#local FASTQ2=$2
#local SAM=$3
#local THREADS=$4
#local BWA_REF=$5
#local RG=$6
#if [[ -z $FASTQ1 || -z $FASTQ2 || -z $SAM || -z $THREADS || -z $BWA_REF || -z $RG ]]; then
#  echo "sample_BWA_align (FASTQ1,FASTQ2,SAM,THREADS,BWA_REF,RG) missing args";
#  return 42;
#fi
#
#if [ $VERBOSE ]; then echo -e "****** sample_BWA_align CMD\n\
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ1 \
#  1> $FASTQ1.sai 
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ2 \
#  1> $FASTQ2.sai"
#fi
#
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ1 \
#  1> $FASTQ1.sai 
#if [ $? -ne 0 ]; then echo "sample_BWA_align() problem with bwa aln read 1"; return 42; fi
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ2 \
#  1> $FASTQ2.sai 
#if [ $? -ne 0 ]; then echo "sample_BWA_align() problem with bwa aln read 2"; return 42; fi
#
#####################
### Example RG line
### @RG"\t"ID:LP6005057-DNA_A03_RG1"\t"PL:illumina"\t"PU:LP6005057-DNA_A03_RG1_LP6005057-DNA_A03"\t"LB:LP6005057-DNA_A03_SS50"\t"SM:LP6005057-DNA_A03"\t"CN:McGill
#####################
#if [ $VERBOSE ]; then echo -e "****** sample_BWA_align CMD\n\
#$BWA_DIR/bwa sampe -r $RG -t $THREADS $BWA_REF $FASTQ1.sai $FASTQ2.sai $FASTQ1 $FASTQ2 \
#  1> $SAM"
#fi
#$BWA_DIR/bwa sampe -r $RG -t $THREADS $BWA_REF $FASTQ1.sai $FASTQ2.sai $FASTQ1 $FASTQ2 \
#  1> $SAM 
#
#return $?
#}
#
#sample_BWA_align_fromBAM() {
##################################################
## BWA Alignment
#echo "*** RUNNING BWA ALIGNMENT"
##################################################
#if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
#cd $RUN_DIR
#local INPUT_BAM=$1
#local SAM=$2
#local THREADS=$3
#local BWA_REF=$4
#local RG=$5
#if [[ -z $FASTQ1 || -z $FASTQ2 || -z $SAM || -z $THREADS || -z $BWA_REF || -z $RG ]]; then
#  echo "sample_BWA_align (FASTQ1,FASTQ2,SAM,THREADS,BWA_REF,RG) missing args";
#  return 42;
#fi
#
#if [ $VERBOSE ]; then echo -e "****** sample_BWA_align_fromBAM CMD\n\
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ1 \
#  1> $FASTQ1.sai 
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ2 \
#  1> $FASTQ2.sai"
#fi
#
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ1 \
#  1> $FASTQ1.sai 
#if [ $? -ne 0 ]; then echo "sample_BWA_align_fromBAM() problem with bwa aln read 1"; return 42; fi
#$BWA_DIR/bwa aln -t $THREADS -q 5 $BWA_REF $FASTQ2 \
#  1> $FASTQ2.sai 
#if [ $? -ne 0 ]; then echo "sample_BWA_align_fromBAM() problem with bwa aln read 2"; return 42; fi
#
#####################
### Example RG line
### @RG"\t"ID:LP6005057-DNA_A03_RG1"\t"PL:illumina"\t"PU:LP6005057-DNA_A03_RG1_LP6005057-DNA_A03"\t"LB:LP6005057-DNA_A03_SS50"\t"SM:LP6005057-DNA_A03"\t"CN:McGill
#####################
#if [ $VERBOSE ]; then echo -e "****** sample_BWA_align_fromBAM CMD\n\
#$BWA_DIR/bwa sampe -r $RG -t $THREADS $BWA_REF $FASTQ1.sai $FASTQ2.sai $FASTQ1 $FASTQ2 \
#  1> $SAM"
#fi
#$BWA_DIR/bwa sampe -r $RG -t $THREADS $BWA_REF $FASTQ1.sai $FASTQ2.sai $FASTQ1 $FASTQ2 \
#  1> $SAM 
#
#return $?
#}
#
#sample_BWA_align_strand() {
##################################################
## BWA Alignment
#echo "*** RUNNING BWA ALIGNMENT STRAND"
##################################################
#if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
#cd $RUN_DIR
#local FASTQ=$1
#local SAI=$2
#local THREADS=$3
#local BWA_REF=$4
#local ENC64=$5
#if [[ -z $FASTQ || -z $SAI || -z $THREADS || -z $BWA_REF || ! $ENC64 ]]; then
#  echo "sample_BWA_align_strand (FASTQ,SAI,THREADS,BWA_REF,ENC64) missing args";
#  return 42;
#fi
#
#ENCODE_FLAG=
#if [[ $ENC64 -eq 1 ]]; then ENCODE_FLAG=-I; 
#elif [[ ! $ENC64 -eq 0 ]]; then echo "Error with the ENCODE_FLAG value";return 42;
#fi
#
#if [ $VERBOSE ]; then echo -e "****** sample_BWA_align_strand CMD\n\
#$BWA_DIR/bwa aln $ENCODE_FLAG -t $THREADS -q 5 -R 1000 $BWA_REF $FASTQ \
#  1> $SAI"
#fi
#$BWA_DIR/bwa aln $ENCODE_FLAG -t $THREADS -q 5 -R 1000 $BWA_REF $FASTQ \
#  1> $SAI 
#
#return $?
#}
#
#sample_BWA_alignPE() {
##################################################
## BWA Alignment
#echo "*** RUNNING BWA ALIGNMENT PE"
##################################################
#if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
#cd $RUN_DIR
#local FASTQ1=$1
#local FASTQ2=$2
#local SAI1=$3
#local SAI2=$4
#local SAM=$5
#local THREADS=$6
#local BWA_REF=$7
#local RG=$8
#if [[ -z $FASTQ1 || -z $FASTQ2 || -z $SAI1 || -z $SAI2 || -z $SAM || -z $THREADS || -z $BWA_REF || -z $RG ]]; then
#  echo "sample_BWA_alignPE (FASTQ1,FASTQ2,SAI1,SAI2,SAM,THREADS,BWA_REF,RG) missing args";
#  return 42;
#fi
#
#if [ $VERBOSE ]; then echo -e "****** sample_BWA_alignPE CMD\n\
#$BWA_DIR/bwa sampe -a 700 -r $RG -t $THREADS $BWA_REF $SAI1 $SAI2 $FASTQ1 $FASTQ2 \
#  1> $SAM"
#fi
#$BWA_DIR/bwa sampe -a 700 -r $RG -t $THREADS $BWA_REF $SAI1 $SAI2 $FASTQ1 $FASTQ2 \
#  1> $SAM 
#
#return $?
#}
#
#
#sample_BWA_alignSE() {
##################################################
## BWA Alignment
#echo "*** RUNNING BWA ALIGNMENT SE"
##################################################
#if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
#cd $RUN_DIR
#local FASTQ=$1
#local SAI=$2
#local SAM=$3
#local THREADS=$4
#local BWA_REF=$5
#local RG=$6
#if [[ -z $FASTQ || -z $SAI || -z $SAM || -z $THREADS || -z $BWA_REF || -z $RG ]]; then
#  echo "sample_BWA_alignSE (FASTQ,SAI,SAM,THREADS,BWA_REF,RG) missing args";
#  return 42;
#fi
#
#if [ $VERBOSE ]; then echo -e "****** sample_BWA_alignSE CMD\n\
#$BWA_DIR/bwa samse -r $RG -t $THREADS $BWA_REF $SAI $FASTQ \
#  1> $SAM"
#fi
#$BWA_DIR/bwa samse -r $RG -t $THREADS $BWA_REF $SAI $FASTQ \
#  1> $SAM 
#
#return $?
#}
#

sample_BWA_alignMemPE() {
#################################################
# BWA Alignment
echo "*** RUNNING BWA MEM PE ALIGNMENT"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ1=$1
local FASTQ2=$2
local SAM=$3
local THREADS=$4
local BWA_REF=$5
local RG=$6
if [[ -z $FASTQ1 || -z $FASTQ2 || -z $SAM || -z $THREADS || -z $BWA_REF || -z $RG ]]; then
  echo "sample_BWA_alignMemPE (FASTQ1,FASTQ2,SAM,THREADS,BWA_REF,RG) missing args";
  return 42;
fi

if [ $VERBOSE ]; then echo -e "****** sample_BWA_alignMemPE CMD\n\
$BWA_DIR/bwa mem -M -R $RG -t $THREADS $BWA_REF $FASTQ1 $FASTQ2 \
  1> $SAM"
fi
$BWA_DIR/bwa mem -M -R $RG -t $THREADS $BWA_REF $FASTQ1 $FASTQ2 \
  1> $SAM 

return $?
}

sample_BWA_alignMemPE_MT() {
#################################################
# BWA Alignment
echo "*** RUNNING BWA MEM PE ALIGNMENT"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ1=$1
local FASTQ2=$2
local MT_SAM=$3
local THREADS=$4
local MT_BWA_REF=$5
local RG=$6
if [[ -z $FASTQ1 || -z $FASTQ2 || -z $MT_SAM || -z $THREADS || -z $MT_BWA_REF || -z $RG ]]; then
  echo "sample_BWA_alignMemPE_MT (FASTQ1,FASTQ2,MT_SAM,THREADS,MT_BWA_REF,RG) missing args";
  return 42;
fi

if [ $VERBOSE ]; then echo -e "****** sample_BWA_alignMemPE CMD\n\
$BWA_DIR/bwa mem -M -R $RG -t $THREADS $MT_BWA_REF $FASTQ1 $FASTQ2 | samtools view -F 0x4 \
  1> $MT_SAM"
fi
	$BWA_DIR/bwa mem -M -R $RG -t $THREADS $MT_BWA_REF $FASTQ1 $FASTQ2 | samtools view -F 0x4 \
  1> $MT_SAM

return $?
}


sample_BWA_alignMemSE() {
#################################################
# BWA Alignment
echo "*** RUNNING BWA MEM SE ALIGNMENT"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ=$1
local SAM=$2
local THREADS=$3
local BWA_REF=$4
local RG=$5
if [[ -z $FASTQ || -z $SAM || -z $THREADS || -z $BWA_REF || -z $RG ]]; then
  echo "sample_BWA_alignSE (FASTQ,SAM,THREADS,BWA_REF,RG) missing args";
  return 42;
fi

if [ $VERBOSE ]; then echo -e "****** sample_BWA_alignMemSE CMD\n\
$BWA_DIR/bwa mem -M -R $RG -t $THREADS $BWA_REF $FASTQ \
  1> $SAM"
fi
$BWA_DIR/bwa mem -M -R $RG -t $THREADS $BWA_REF $FASTQ \
  1> $SAM

return $?
}

sample_remove_non_primary_aln() {
##############################################################
# Remove non primary alignment reads from the bam 
# file. Tag from the read (256) used to filter.
echo "*** RUNNING REMOVE NON PRIMARY ALN"
##############################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
INPUT=$1
OUTPUT=$2

if [[ -z $INPUT || -z $OUTPUT ]]; then echo "sample_remove_non_primary_aln (INPUT,OUTPUT) missing args"; return 42; fi

INPUT=`echo $INPUT | sed 's/@/ /g'`

if [ $VERBOSE ]; then echo -e "****** sample_remove_non_primary_aln samtools view CMD\n\
samtools view -bh -F 256 -o $OUTPUT $INPUT"
fi
samtools view -bh -F 256 -o $OUTPUT $INPUT
if [ $? -ne 0 ]; then echo "sample_remove_non_primary_aln() problem with samtools view"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** sample_remove_non_primary_aln samtools index CMD\n\
samtools index $OUTPUT"
fi
samtools index $OUTPUT
if [ $? -ne 0 ]; then echo "sample_remove_non_primary_aln() problem with samtools index"; return 42; fi

}

sample_keep_non_primary_aln() {
##############################################################
# Only keep the non primary alignment reads from the bam 
# file. Tag from the read (256) used to filter.
echo "*** RUNNING KEEP NON PRIMARY ALN"
##############################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
INPUT=$1
OUTPUT=$2

if [[ -z $INPUT || -z $OUTPUT ]]; then echo "sample_keep_non_primary_aln (INPUT,OUTPUT) missing args"; return 42; fi

INPUT=`echo $INPUT | sed 's/@/ /g'`

if [ $VERBOSE ]; then echo -e "****** sample_keep_non_primary_aln samtools view CMD\n\
samtools view -bh -f 256 -o $OUTPUT $INPUT"
fi
samtools view -bh -f 256 -o $OUTPUT $INPUT
if [ $? -ne 0 ]; then echo "sample_keep_non_primary_aln() problem with samtools view"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** sample_keep_non_primary_aln samtools index CMD\n\
samtools index $OUTPUT"
fi
samtools index $OUTPUT
if [ $? -ne 0 ]; then echo "sample_keep_non_primary_aln() problem with samtools index"; return 42; fi

}

sample_mergeSort_BAMs() {
#################################################
# Merge BAM Alignments
#     $INPUT, a.k.a. $1, must be a STRING like : "INPUT=file1@INPUT=file2..."
echo "*** RUNNING BAMs MERGE + SORT"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
INPUT=$1
OUTPUT=$2
let MAX_RECORDS_IN_RAM_VALUE=$MAX_MEM*200000 # MAX_RECORDS_IN_RAM=(qscript.maxMemoryLimit * 250000 * 0.8).toInt

if [[ -z $INPUT || -z $OUTPUT ]]; then echo "sample_mergeSort_BAMs (INPUT,OUTPUT) missing args"; return 42; fi

INPUT=`echo $INPUT | sed 's/@/ /g'`

if [ $VERBOSE ]; then echo -e "****** sample_mergeSort_BAMs CMD\n\
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar MergeSamFiles \
  TMP_DIR=$TEMP_DIR \
  $INPUT \
  OUTPUT=$OUTPUT \
  USE_THREADING=TRUE \
  CREATE_INDEX=TRUE \
  MAX_RECORDS_IN_RAM=$MAX_RECORDS_IN_RAM_VALUE \
  COMPRESSION_LEVEL=0"
fi

java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar MergeSamFiles \
  VALIDATION_STRINGENCY=SILENT \
  TMP_DIR=$TEMP_DIR \
  $INPUT \
  OUTPUT=$OUTPUT \
  USE_THREADING=TRUE \
  CREATE_INDEX=TRUE \
  MAX_RECORDS_IN_RAM=$MAX_RECORDS_IN_RAM_VALUE \
  COMPRESSION_LEVEL=0 

return $?
}

sample_merge_nosort_BAMs() {
#################################################
# Merge BAM Alignments
#     $INPUT, a.k.a. $1, must be a STRING like : "INPUT=file1 INPUT=file2..."
echo "*** RUNNING BAMs MERGE"
#################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
INPUT=$1
OUTPUT=$2

if [[ -z $INPUT || -z $OUTPUT ]]; then echo "sample_merge_nosort_BAMs (INPUT,OUTPUT) missing args"; return 42; fi
INPUT=`echo $INPUT | sed 's/@/ /g'`

if [ $VERBOSE ]; then echo -e "****** sample_merge_nosort_BAMs CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar MergeSamFiles \
  TMP_DIR=$TEMP_DIR \
  $INPUT \
  OUTPUT=$OUTPUT \
  USE_THREADING=FALSE \
  SORT_ORDER=queryname \
  ASSUME_SORTED=false \
  COMPRESSION_LEVEL=0"
fi

java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar MergeSamFiles \
  VALIDATION_STRINGENCY=SILENT \
  TMP_DIR=$TEMP_DIR \
  $INPUT \
  OUTPUT=$OUTPUT \
  USE_THREADING=FALSE \
  SORT_ORDER=queryname \
  ASSUME_SORTED=false \
  COMPRESSION_LEVEL=0 

return $?
}

#SOURCE: /RQexec/dionnela/data/templates/incoming_Illumina_HiSeq/GATK_BWA.v37/fastqToSAM.sh
sample_fastqToSAM() {
##########################################
## FastqToSAM
echo "*** RUNNING FastqToSam ***"
##########################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local FASTQ1=$1
local FASTQ2=$2
local LIB_NAME=$3
local READ_GROUP=$4
local CENTER=$5
if [[ -z $FASTQ1 || -z $FASTQ2  || -z $LIB_NAME || -z $READ_GROUP || -z $CENTER ]]; then echo "sample_fastqToSAM (FASTQ1,FASTQ2,LIB_NAME,READ_GROUP,CENTER) missing args"; return 42; fi

let MAX_RECORDS_IN_RAM_VALUE=$MAX_MEM*200000 # MAX_RECORDS_IN_RAM=(qscript.maxMemoryLimit * 250000 * 0.8).toInt

if [ $VERBOSE ]; then echo -e "****** sample_fastqToSAM CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar FastqToSam \
  FASTQ=$FASTQ1 \
  FASTQ2=$FASTQ2 \
  SAMPLE_NAME=$SAMPLE \
  QUALITY_FORMAT=Standard \
  SORT_ORDER=unsorted \
  TMP_DIR=$TEMP_DIR \
  MAX_RECORDS_IN_RAM=$MAX_RECORDS_IN_RAM_VALUE \
  OUTPUT=$SAMPLE.unaligned.bam \
  READ_GROUP_NAME="$SAMPLE"_"$READ_GROUP" \
  LIBRARY_NAME=$LIB_NAME \
  PLATFORM=illumina \
  SEQUENCING_CENTER=$CENTER \
  CREATE_INDEX=true"
fi

#run the picard script
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $PICARD_DIR/picard.jar FastqToSam \
  VALIDATION_STRINGENCY=SILENT \
  FASTQ=$FASTQ1 \
  FASTQ2=$FASTQ2 \
  SAMPLE_NAME=$SAMPLE \
  QUALITY_FORMAT=Standard \
  SORT_ORDER=unsorted \
  TMP_DIR=$TEMP_DIR \
  MAX_RECORDS_IN_RAM=$MAX_RECORDS_IN_RAM_VALUE \
  OUTPUT=$SAMPLE.unaligned.bam \
  READ_GROUP_NAME="$SAMPLE"_"$READ_GROUP" \
  LIBRARY_NAME=$LIB_NAME \
  PLATFORM=illumina \
  SEQUENCING_CENTER=$CENTER \
  CREATE_INDEX=true 

return $?
}

sample_GATK_data_processing() {
#####################################################
# Data Processing
echo "*** RUNNING GATK DATA PROCESSING PIPELINE"
#####################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local PROJECT_NAME=$1
local REF_ALIGN=$2
local USE_INDELS=$3
local START_FROM_SCRATCH=$4
local COMMAND_INDELS=
local COMMAND_START_FROM_SCRATCH=
if [[ -z $PROJECT_NAME || -z $REF_ALIGN || -z $USE_INDELS ]]; then echo "sample_GATK_data_processing (PROJECT_NAME,REF_ALIGN,USE_INDELS) missing args"; return 42; fi
if [[ ! -e $SAMPLE.unaligned.bam ]]; then echo "sample_GATK_data_processing() $SAMPLE.unaligned.bam not found"; return 42; fi
if [[ ! -e ${EXOME_POST_PROCESSING_SCALA} ]]; then echo "sample_GATK_data_processing() ${EXOME_POST_PROCESSING_SCALA} not found"; return 42; fi
if [[ -z $JAVA_MEM ]]; then echo "sample_GATK_data_processing() JAVA_MEM unset"; return 42; fi
if [[ -z $MAX_MEM ]]; then echo "sample_GATK_data_processing() MAX_MEM unset"; return 42; fi
if [[ -z $THREADS ]]; then echo "sample_GATK_data_processing() THREADS unset"; return 42; fi
if [[ -z $TEMP_DIR ]]; then echo "sample_GATK_data_processing() TEMP_DIR"; return 42; fi
if [[ -z $GATK_KEY ]]; then echo "sample_GATK_data_processing() GATK_KEY unset"; return 42; fi
if [[ -z $DBSNP ]]; then echo "sample_GATK_data_processing() DBSNP unset"; return 42; fi
if [[ -z $BWA_DIR ]]; then echo "sample_GATK_data_processing() BWA_DIR unset"; return 42; fi

if [ $USE_INDELS -eq 1 ]; then COMMAND_INDELS="--extra_indels $INDELS"; fi
if [ $START_FROM_SCRATCH -eq 1 ]; then COMMAND_START_FROM_SCRATCH="--start_from_scratch"; fi
DATE=`date +%F`;

if [ $VERBOSE ]; then echo -e "****** sample_GATK_data_processing CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
  --script ${EXOME_POST_PROCESSING_SCALA} \
  --max_memory_limit $MAX_MEM \
  --procs_per_node $THREADS \
  --temp_directory $TEMP_DIR \
  --input $SAMPLE.unaligned.bam \
  --reference $REF_ALIGN \
  --dbsnp $DBSNP \
  $COMMAND_INDELS \
  --project $PROJECT_NAME \
  --path_to_bwa $BWA_DIR/bwa \
  $COMMAND_START_FROM_SCRATCH \
  --retry_failed 10 \
  -l DEBUG \
  --realign \
  --jobReport ${PROJECT_NAME}.DataProcessingPipeline.${DATE}.jobreport.txt \
  -run"
fi
#  --keep_intermediate_outputs \
#  --no_validation \
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
  --script ${EXOME_POST_PROCESSING_SCALA} \
  --max_memory_limit $MAX_MEM \
  --procs_per_node $THREADS \
  --temp_directory $TEMP_DIR \
  --input $SAMPLE.unaligned.bam \
  --reference $REF_ALIGN \
  --dbsnp $DBSNP \
  $COMMAND_INDELS \
  --project $PROJECT_NAME \
  --path_to_bwa $BWA_DIR/bwa \
  $COMMAND_START_FROM_SCRATCH \
  --retry_failed 10 \
  -l DEBUG \
  --realign \
  --jobReport ${PROJECT_NAME}.DataProcessingPipeline.${DATE}.jobreport.txt \
  -run

return $?
}


sample_GATK_data_processing_noalign() {
#####################################################
# Data Processing
echo "*** RUNNING GATK DATA PROCESSING PIPELINE"
#####################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local ALIGNED_BAM=$1
local PROJECT_NAME=$2
local REF_ALIGN=$3
local USE_INDELS=$4
local START_FROM_SCRATCH=$5
local KEEP_INTERMEDIATES=$6
local SCALA=$7
local COMMAND_INDELS=
local COMMAND_START_FROM_SCRATCH=
local COMMAND_KEEP_INTERMEDIATES=

if [[ -z $PROJECT_NAME || -z $REF_ALIGN || -z $USE_INDELS || -z $START_FROM_SCRATCH || -z $KEEP_INTERMEDIATES ]]; then echo "sample_GATK_data_processing_noalign (ALIGNED_BAM,PROJECT_NAME,REF_ALIGN,USE_INDELS,START_FROM_SCRATCH,KEEP_INTERMEDIATES) missing args"; return 42; fi
if [[ ! -e $ALIGNED_BAM ]]; then echo "sample_GATK_data_processing_noalign() $ALIGNED_BAM not found"; return 42; fi
if [[ ! -e ${EXOME_POST_PROCESSING_SCALA} ]]; then echo "sample_GATK_data_processing_noalign() ${EXOME_POST_PROCESSING_SCALA} not found"; return 42; fi
if [[ -z $JAVA_MEM ]]; then echo "sample_GATK_data_processing_noalign() JAVA_MEM unset"; return 42; fi
if [[ -z $MAX_MEM ]]; then echo "sample_GATK_data_processing_noalign() MAX_MEM unset"; return 42; fi
if [[ -z $THREADS ]]; then echo "sample_GATK_data_processing_noalign() THREADS unset"; return 42; fi
if [[ -z $TEMP_DIR ]]; then echo "sample_GATK_data_processing_noalign() TEMP_DIR"; return 42; fi
if [[ -z $GATK_KEY ]]; then echo "sample_GATK_data_processing_noalign() GATK_KEY unset"; return 42; fi
if [[ -z $DBSNP ]]; then echo "sample_GATK_data_processing_noalign() DBSNP unset"; return 42; fi

if [[ -z $SCALA ]]; then SCALA=${EXOME_POST_PROCESSING_SCALA}; fi

#if [[ -z $BWA_DIR ]]; then echo "sample_GATK_data_processing_noalign() BWA_DIR unset"; return 42; fi

if [[ $USE_INDELS -eq 1 ]]; then COMMAND_INDELS="--extra_indels $INDELS" ; fi
if [[ $START_FROM_SCRATCH -eq 1 ]]; then COMMAND_START_FROM_SCRATCH="--start_from_scratch"; fi
if [[ $KEEP_INTERMEDIATES -eq 1 ]]; then COMMAND_KEEP_INTERMEDIATES="--keep_intermediate_outputs"; fi
DATE=`date +%F`;


#java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
if [ $VERBOSE ]; then echo -e "****** sample_GATK_data_processing_noalign CMD\n\
java -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
  --script $SCALA \
  --max_memory_limit $MAX_MEM \
  --procs_per_node $THREADS \
  --temp_directory $TEMP_DIR \
  --input $ALIGNED_BAM \
  --reference $REF_ALIGN \
  --dbsnp $DBSNP \
  $COMMAND_INDELS \
  --project $PROJECT_NAME \
  $COMMAND_START_FROM_SCRATCH \
  $COMMAND_KEEP_INTERMEDIATES \
  --retry_failed 10 \
  -l DEBUG \
  --jobReport ${PROJECT_NAME}.DataProcessingPipeline.${DATE}.jobreport.txt \
  -run"
fi
#  --keep_intermediate_outputs \
#  --no_validation \
#java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
java -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
  --script $SCALA \
  --max_memory_limit $MAX_MEM \
  --procs_per_node $THREADS \
  --temp_directory $TEMP_DIR \
  --input $ALIGNED_BAM \
  --reference $REF_ALIGN \
  --dbsnp $DBSNP \
  $COMMAND_INDELS \
  --project $PROJECT_NAME \
  $COMMAND_START_FROM_SCRATCH \
  $COMMAND_KEEP_INTERMEDIATES \
  --retry_failed 10 \
  -l DEBUG \
  --jobReport ${PROJECT_NAME}.DataProcessingPipeline.${DATE}.jobreport.txt \
  -run
return $?
}

sample_GATK_WGS_data_processing_aligned_bam_post_processing() {
#############################################################
# Data Processing
echo "*** RUNNING GATK DATA PROCESSING PIPELINE ALIGNED BAM"
#############################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local PROJECT_NAME=$1
local REF_ALIGN=$2
local BAM=$3
local THREADS=$4
local USE_INDELS=$5
local START_FROM_SCRATCH=$6
local KEEP_INTERMEDIATES=$7
local COMMAND_INDELS=
local COMMAND_START_FROM_SCRATCH=
local COMMAND_KEEP_INTERMEDIATES=

if [[ -z $PROJECT_NAME || -z $BAM || -z $REF_ALIGN || -z $USE_INDELS || -z $THREADS ]]; then
  echo "sample_GATK_data_processing_aligned_bam_post_processing (PROJECT_NAME,REF_ALIGN,BAM,THREADS,USE_INDELS,START_FROM_SCRATCH,KEEP_INTERMEDIATES) missing args"; return 42;
fi
if [[ ! -e $WGS_ALIGNED_BAM_POST_PROCESSING_SCALA ]]; then echo "sample_GATK_data_processing_aligned_bam_post_processing() $WGS_ALIGNED_BAM_POST_PROCESSING_SCALA not found"; return 42; fi
if [[ $USE_INDELS -eq 1 ]]; then COMMAND_INDELS="--extra_indels $INDELS"; fi
if [[ $START_FROM_SCRATCH -eq 1 ]]; then COMMAND_START_FROM_SCRATCH="--start_from_scratch"; fi
if [[ $KEEP_INTERMEDIATES -eq 1 ]]; then COMMAND_KEEP_INTERMEDIATES="--keep_intermediate_outputs"; fi
DATE=`date +%F`;

if [ $VERBOSE ]; then echo -e "****** sample_GATK_data_processing_aligned_bam_post_processing CMD\n\
java -Xmx${JAVA_MEM}g  -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
  --script $WGS_ALIGNED_BAM_POST_PROCESSING_SCALA \
  --memory_limit $MAX_MEM \
  --resident_memory_limit $MAX_MEM \
  --resident_memory_request  $MAX_MEM \
  --max_memory_limit $MAX_MEM \
  --procs_per_node $THREADS \
  --temp_directory $TEMP_DIR \
  --input $BAM \
  --reference $REF_ALIGN \
  --dbsnp $DBSNP \
  $COMMAND_INDELS \
  --project $PROJECT_NAME \
  $COMMAND_START_FROM_SCRATCH \
  $COMMAND_KEEP_INTERMEDIATES \
  --retry_failed 10 \
  -l DEBUG \
  --jobReport ${PROJECT_NAME}.DataProcessingPipeline.${DATE}.jobreport.txt \
  -run"
fi

java -Xmx${JAVA_MEM}g  -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/Queue.jar \
  --script $WGS_ALIGNED_BAM_POST_PROCESSING_SCALA \
  --memory_limit $MAX_MEM \
  --resident_memory_limit $MAX_MEM \
  --resident_memory_request  $MAX_MEM \
  --max_memory_limit $MAX_MEM \
  --procs_per_node $THREADS \
  --temp_directory $TEMP_DIR \
  --input $BAM \
  --reference $REF_ALIGN \
  --dbsnp $DBSNP \
  $COMMAND_INDELS \
  --project $PROJECT_NAME \
  $COMMAND_START_FROM_SCRATCH \
  $COMMAND_KEEP_INTERMEDIATES \
  --retry_failed 10 \
  -l DEBUG \
  --jobReport ${PROJECT_NAME}.DataProcessingPipeline.${DATE}.jobreport.txt \
  -run

return $?
}


#sample_filter_MT() {
###########################################
## Preparing MT for calling
#echo "*** FILTERING MT ALIGNMENTS"
###########################################
#if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
#cd $RUN_DIR
#
#local BAMFILE_MT=$1
#local BAMFILE_MT_FILTER=$2
#if [[ -z $BAMFILE_MT ]]; then echo "sample_filter_MT (BAMFILE_MT) missing args"; return 42; fi
#if [[ -z $BAMFILE_MT_FILTER ]]; then echo "sample_filter_MT (BAMFILE_MT_FILTER) missing args"; return 42; fi
#
#local HEADER=${GATK_MT_PREFIX}.${SAMPLE}.sam.header
#
#if [ $VERBOSE ]; then echo -e "****** sample_filter_MT CMD\n\
#$SAMTOOLS_DIR/samtools view -H $BAMFILE_MT > $HEADER 
#$SAMTOOLS_DIR/samtools view $BAMFILE_MT | awk '{ if ( $6 != "*" && $3 == "MT" && length ($10) > 30 ) {print} }' > ${BAMFILE_MT_FILTER}.sam 
#cat $HEADER ${BAMFILE_MT_FILTER}.sam > ${BAMFILE_MT_FILTER}.sam.w_header 
#$SAMTOOLS_DIR/samtools view -bS ${BAMFILE_MT_FILTER}.sam.w_header -o ${BAMFILE_MT_FILTER} 
#$SAMTOOLS_DIR/samtools index ${BAMFILE_MT_FILTER} 
#rm ${BAMFILE_MT_FILTER}.sam ${BAMFILE_MT_FILTER}.sam.w_header ${HEADER}"
#fi
#
#$SAMTOOLS_DIR/samtools view -H $BAMFILE_MT > $HEADER
#if [ $? -ne 0 ]; then echo "sample_filter_MT() problem 1"; return 42; fi
##Selecting MT alignments with length > 30 bp 
#$SAMTOOLS_DIR/samtools view $BAMFILE_MT | awk '{ if ( $6 != "*" && $3 == "MT" && length ($10) > 30 ) {print} }' > ${BAMFILE_MT_FILTER}.sam 
#if [ $? -ne 0 ]; then echo "sample_filter_MT() problem 2"; return 42; fi
#cat $HEADER ${BAMFILE_MT_FILTER}.sam > ${BAMFILE_MT_FILTER}.sam.w_header 
#$SAMTOOLS_DIR/samtools view -bS ${BAMFILE_MT_FILTER}.sam.w_header -o ${BAMFILE_MT_FILTER} 
#if [ $? -ne 0 ]; then echo "sample_filter_MT() problem 3"; return 42; fi
#$SAMTOOLS_DIR/samtools index ${BAMFILE_MT_FILTER} 
#if [ $? -ne 0 ]; then echo "sample_filter_MT() problem 4"; return 42; fi
#rm ${BAMFILE_MT_FILTER}.sam ${BAMFILE_MT_FILTER}.sam.w_header ${HEADER}
#return $?
#}
#

sample_filter_MT() {
##########################################
# Preparing MT for calling
echo "*** FILTERING MT ALIGNMENTS"
##########################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR

local BAMFILE_MT=$1
local BAMFILE_MT_FILTER=$2
if [[ -z $BAMFILE_MT ]]; then echo "sample_filter_MT (BAMFILE_MT) missing args"; return 42; fi
if [[ -z $BAMFILE_MT_FILTER ]]; then echo "sample_filter_MT (BAMFILE_MT_FILTER) missing args"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** sample_filter_MT CMD\n\
$SAMTOOLS_DIR/samtools view -F 0x4 -b ${BAMFILE_MT} -o ${BAMFILE_MT_FILTER}
$SAMTOOLS_DIR/samtools index ${BAMFILE_MT_FILTER} 
rm ${BAMFILE_MT_FILTER}.sam ${BAMFILE_MT_FILTER}.sam.w_header ${HEADER}"
fi

$SAMTOOLS_DIR/samtools view -F 0x4 -b ${BAMFILE_MT} -o ${BAMFILE_MT_FILTER}
if [ $? -ne 0 ]; then echo "sample_filter_MT() problem 1"; return 42; fi
$SAMTOOLS_DIR/samtools index ${BAMFILE_MT_FILTER} 
if [ $? -ne 0 ]; then echo "sample_filter_MT() problem 2"; return 42; fi
rm ${BAMFILE_MT} $(echo ${BAMFILE_MT}|sed 's/bam$/bai/g')
return $?
}


sample_filter() {
##########################################
# Cleaning a sam file to keep only high quality reads
echo "*** FILTERING ALIGNMENTS"
##########################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR

local SAMFILE_IN=$1
local MIN_SIZE=$2

local SAMFILE_TMP=${SAMFILE_IN}.filtered
if [[ -z $SAMFILE_IN ]]; then echo "sample_filter (SAMFILE_IN) missing args"; return 42; fi
if [[ -z $MIN_SIZE ]]; then MIN_SIZE=1000; fi

if [ $VERBOSE ]; then echo -e "****** sample_filter CMD\n\
  cat $SAMFILE_IN | samtools view -h -F 0x104 -q 20 - | perl -ne ' my \$res; if (\$_=~/^@/) {print \$_} else { @data=split(\"\\\t\", \$_);@vals=split(([SMDIH]), \$data[5]); if ( @vals > 7 ) {next} for (my \$index=0; \$index < @vals; \$index=\$index+2) {  \$res->{\$vals[\$index+1]}+=\$vals[\$index]; } ; if (\$res->{'M'}<${MIN_SIZE}) {next} ; if ( \$pairs->{\$data[0]} ) {print \$pairs->{\$data[0]}; print \$_; delete \$pairs{\$data[0]};} else { \$pairs->{\$data[0]} = \$_ }}' > $SAMFILE_TMP;"
fi;

cat $SAMFILE_IN | samtools view -h -F 0x104 -q 20 - | \
  perl -ne ' 
    my $res; 
    if ($_=~/^@/) {print $_}
    else { 
      @data=split("\t", $_);@vals=split(/([SMDIH])/, $data[5]); 
      if ( @vals > 8 ) {next} 
      for (my $index=0; $index < @vals; $index=$index+2) {  
        $res->{$vals[$index+1]}+=$vals[$index]; 
      }
      if ($res->{'M'}<$ENV{MIN_SIZE}) {next} ;  
      if ( $pairs->{$data[0]} ) {
        print $pairs->{$data[0]}; 
        print $_; 
        delete $pairs{$data[0]};
      } 
      else { $pairs->{$data[0]} = $_ }
    }' > $SAMFILE_TMP; 

if [[ $? == 0 ]]; then 
  mv $SAMFILE_TMP $SAMFILE_IN; 
else echo "sample_filter problem"; return 42; 
fi
 
return $?
}


sample_metrics_flagstat() {
###########################################################
## Stats - Metrics from Samtools Flagstat tool
echo "*** Generating metrics using Samtools Flagstat"
###########################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR

local BAMFILE=$1;
local OUTFILE=$2

if [[ -z $BAMFILE || -z $OUTFILE ]]; then echo "sample_metrics_flagstat (BAMFILE OUTFILE) missing args"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** sample_metrics_flagstat CMD\n\
  $SAMTOOLS_DIR/samtools flagstat $BAMFILE > ${OUTFILE}";
fi;

$SAMTOOLS_DIR/samtools flagstat $BAMFILE > ${OUTFILE}

return $?
}

sample_metrics_verifyBamID() {
###############################################################################
## Stats - Metrics for cross sample contamination using verifyBamID
echo "*** Generating metrics for cross sample contamination using verifyBamID"
###############################################################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR

local BAMFILE=$1;
local RESULTS_PREFIX=$2

if [[ -z $BAMFILE || -z ${RESULTS_PREFIX} ]]; then echo "sample_metrics_verifyBamID (BAMFILE RESULTS_PREFIX) missing args"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** sample_metrics_verifyBamID CMD\n\
verifyBamID --vcf ${VERIFYBAMID_GENOTYPES} --bam $BAMFILE --self --out ${RESULTS_PREFIX}";
fi;

verifyBamID --vcf ${VERIFYBAMID_GENOTYPES} --bam $BAMFILE --self --out ${RESULTS_PREFIX}

return $?
}

sample_metrics_DepthOfCoverage() {
###############################################################################
## Stats - Alignment QC Capture NoFlanking
echo "*** Generating statistics (DepthOfCoverage)"
###############################################################################

if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local REF_DepthOfCoverage=$1
local BAM_DepthOfCoverage=$2
local RUN_NAME=$3
local BED_DepthOfCoverage_ARG=$4
local BED_DepthOfCoverage_COMMAND=
local GENE_LIST_ARG=$5
local GENE_LIST_COMMAND=
if [[ -z $REF_DepthOfCoverage || -z $BAM_DepthOfCoverage || -z $RUN_NAME ]]; then 
  echo "sample_metrics_DepthOfCoverage (REF,BAM,RUN_NAME[,BED,GENE_LIST_ARG]) missing args"; return 42; 
fi
if [[ -n $GENE_LIST_ARG ]]; then GENE_LIST_COMMAND="-geneList $GENE_LIST_ARG"; fi
if [[ -n $BED_DepthOfCoverage_ARG ]]; then BED_DepthOfCoverage_COMMAND="--intervals $BED_DepthOfCoverage_ARG"; fi

if [ $VERBOSE ]; then echo -e "****** sample_metrics_DepthOfCoverage CMD\n\
java -Xmx6g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T DepthOfCoverage \
  --input_file $BAM_DepthOfCoverage \
  --out DepthOfCoverage.$RUN_NAME \
  $BED_DepthOfCoverage_COMMAND \
  $GENE_LIST_COMMAND \
  --reference_sequence $REF_DepthOfCoverage \
  --summaryCoverageThreshold 10 --summaryCoverageThreshold 20  --summaryCoverageThreshold 30 --summaryCoverageThreshold 50 --summaryCoverageThreshold 75 --summaryCoverageThreshold 100 \
  --omitDepthOutputAtEachBase --omitLocusTable \
  --partitionType sample --partitionType readgroup \
  --minBaseQuality 0 --minMappingQuality 20 --includeRefNSites \
  -dcov 5000  --start 1 --stop 5000 --nBins 200"
fi

java -Xmx6g -Djava.io.tmpdir=$TEMP_DIR \
  -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T DepthOfCoverage \
  --input_file $BAM_DepthOfCoverage \
  --out DepthOfCoverage.$RUN_NAME \
  $BED_DepthOfCoverage_COMMAND \
  $GENE_LIST_COMMAND \
  --reference_sequence $REF_DepthOfCoverage \
  --summaryCoverageThreshold 10 --summaryCoverageThreshold 20  --summaryCoverageThreshold 30 --summaryCoverageThreshold 50 --summaryCoverageThreshold 75 --summaryCoverageThreshold 100 \
  --omitDepthOutputAtEachBase --omitLocusTable \
  --partitionType sample --partitionType readgroup \
  --minBaseQuality 0 --minMappingQuality 20 --includeRefNSites \
  -dcov 5000  --start 1 --stop 5000 --nBins 200 

return $? 
}

#SOURCE: /RQexec/dionnela/data/templates/incoming_Illumina_HiSeq/GATK_BWA.v37/cleanupTempFiles.sh
sample_cleanup() {
##########################################
## Clean UP
echo "*** DELETE AND COMPRESS TEMP FILES"
##########################################
if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR

if [ $VERBOSE ]; then
  echo umask 002
  echo "find -perm 600 -exec chmod 664 \{\} \;"
  
  #move logs and change perms
  echo mkdir LOGS
  echo "mv -v *.o[0-9]* *.out *.stderr Exome.DataProcessingPipeline.*.txt MT.DataProcessingPipeline.*.txt LOGS"
  
  #move stats files
  echo "mkdir STATS"
  echo "mv -v DepthOfCoverage.* *.metrics *.flagstat *.vs.*.csv *.verifyBamID.* fastqc.* STATS "
  
  #remove unused files
  echo rm -rfv temp;
  echo rm -vf *fq.trim*.gz *r?.fastq.trimmomaticPE.*paired.gz
  echo "find . -empty -type f -exec rm -v \{\} \;"
  echo "Compressing files"
  echo tar czvf SMALL_FILES.tar.gz `echo \
   $(find . -maxdepth 1 -type f -size -1024k) \
   $(find -name "MT.*.ba*") \
   $(find -name "*non_pri_aln.ba*") \
   LOGS STATS | \
   sed -e 's/ /\n/g' | sed -e '/gz$/d' | sort | uniq`
  echo rm -rfv `echo \
   $(find . -maxdepth 1 -type f -size -1024k) \
   $(find -name "MT.*.ba*") \
   $(find -name "*non_pri_aln.ba*") \
   LOGS STATS | \
   sed -e 's/ /\n/g' | sed -e '/gz$/d' | sort | uniq` 
fi

umask 002
 find -perm 600 -exec chmod 664 \{\} \;

 #move logs and change perms
 mkdir LOGS
 mv -v *.o[0-9]* *.out *.stderr Exome.DataProcessingPipeline.*.txt MT.DataProcessingPipeline.*.txt LOGS
 
 #move stats files
 mkdir STATS
 mv -v DepthOfCoverage.* *.metrics *.flagstat *.vs.*.csv *.verifyBamID.* fastqc.* STATS

 #remove unused files
 rm -rfv temp;
 rm -vf *fq.trim*.gz *r?.fastq.trimmomaticPE.*paired.gz
 find . -empty -type f -exec rm -v \{\} \;
 echo "Compressing files"
 tar czvf SMALL_FILES.tar.gz `echo \
  $(find . -maxdepth 1 -type f -size -1024k) \
  $(find -name "MT.*.ba*") \
  $(find -name "*non_pri_aln.ba*") \
  LOGS STATS | \
  sed -e 's/ /\n/g' | sed -e '/gz$/d' | sort | uniq` #keep uniq files, excluding archives .gz
 rm -rfv `echo \
  $(find . -maxdepth 1 -type f -size -1024k) \
  $(find -name "MT.*.ba*") \
  $(find -name "*non_pri_aln.ba*") \
  LOGS STATS | \
  sed -e 's/ /\n/g' | sed -e '/gz$/d' | sort | uniq`


#if [ $VERBOSE ]; then 
#  echo -e "****** sample_cleanup CMD"
#  echo "rm -rf $TEMP_DIR"
#  echo "rm ${SAMPLE}.unaligned.bam"
#fi
#
#rm -rf $TEMP_DIR
#rm ${SAMPLE}.unaligned.bam

return $?
}


##########################################
##
##
## NEXT ARE COMBINATION OF FUNCTIONS
##
##
##########################################

sample_variant_total_recall() {
##########################################
## VARIANT CALLING
echo "*** STARTING VARIANT TOTAL RECALL"
##########################################

if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local SAMPLE_BAM=$1
local SAMPLE_VARIANTS=$2
local SAMPLE_VARIANT_SITES=$3
local TARGET_BED=$4
local DOWNSAMPLE_COV=$5
local DOWNSAMPLE_COV_COMMAND=
if [[ -z $SAMPLE_BAM || -z $SAMPLE_VARIANTS || -z $SAMPLE_VARIANTS || -z $TARGET_BED ]]; then
  echo "sample_variant_total_recall (SAMPLE_BAM,SAMPLE_VARIANTS,SAMPLE_VARIANT_SITES,TARGET_BED,[DOWNSAMPLE_COV]) missing args"; return 42;
fi
if [[ -n $DOWNSAMPLE_COV ]]; then DOWNSAMPLE_COV_COMMAND="--downsample_to_coverage $DOWNSAMPLE_COV"; fi

echo "****** STARTING UnifiedGenotyper total recall"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T UnifiedGenotyper \
  -nt $THREADS \
  -R $REF \
  --input_file $SAMPLE_BAM \
  --out $SAMPLE_VARIANTS \
  --metrics_file ${SAMPLE_VARIANTS}.metrics \
  --intervals $TARGET_BED \
  --dbsnp $DBSNP \
  --genotype_likelihoods_model BOTH \
  --output_mode EMIT_ALL_SITES \
  --annotation HomopolymerRun \
  $DOWNSAMPLE_COV_COMMAND" 
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T UnifiedGenotyper \
  -nt $THREADS \
  -R $REF \
  --input_file $SAMPLE_BAM \
  --out $SAMPLE_VARIANTS \
  --metrics_file ${SAMPLE_VARIANTS}.metrics \
  --intervals $TARGET_BED \
  --dbsnp $DBSNP \
  --genotype_likelihoods_model BOTH \
  --output_mode EMIT_ALL_SITES \
  --annotation HomopolymerRun \
  $DOWNSAMPLE_COV_COMMAND  
if [ $? -ne 0 ]; then echo "sample_variant_total_recall UnifiedGenotyper problem"; return 42; fi 

if [[ $SAMPLE_VARIANTS != *.gz ]]; then
  if [ $VERBOSE ]; then echo -e "****** bgzip CMD\nbgzip $SAMPLE_VARIANTS"; fi
  bgzip  -f $SAMPLE_VARIANTS
  $SAMPLE_VARIANTS=$SAMPLE_VARIANTS.gz
  if [ $? -ne 0 ]; then echo "sample_variant_total_recall bgzip problem"; return 42; fi
fi

if [ $VERBOSE ]; then echo -e "****** tabix CMD\ntabix -p vcf -f ${SAMPLE_VARIANTS}"; fi
tabix -p vcf -f ${SAMPLE_VARIANTS}
if [ $? -ne 0 ]; then echo "sample_variant_total_recall tabix problem"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** extracting variant sites only CMD\n\
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T SelectVariants \
  -nt $THREADS \
  -R $REF \
  --excludeNonVariants \
  --variant ${SAMPLE_VARIANTS} \
  --out ${SAMPLE_VARIANT_SITES}"
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T SelectVariants \
  -nt $THREADS \
  -R $REF \
  --excludeNonVariants \
  --variant ${SAMPLE_VARIANTS} \
  --out ${SAMPLE_VARIANT_SITES}
if [ $? -ne 0 ]; then echo "sample_variant_total_recall problem extracting variant sites only"; return 42; fi

if [ $VERBOSE ]; then echo -e "****** tabix CMD\ntabix -p vcf -f ${SAMPLE_VARIANT_SITES}"; fi
tabix -p vcf -f ${SAMPLE_VARIANT_SITES}
if [ $? -ne 0 ]; then echo "sample_variant_total_recall tabix variant sites problem"; return 42; fi

}

sample_variant_haplotype_caller() {
##############################################
## VARIANT CALLING
echo "*** STARTING VARIANT HAPLOTYPE CALLER"
##############################################

if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local SAMPLE_BAM=$1
local GVCF=$2
local VCFFILE=$3
local HC_BAM_OUT=$4
local TARGET_BED=$5
if [[ -z $SAMPLE_BAM || -z $GVCF || -z $VCFFILE || -z $HC_BAM_OUT || -z $TARGET_BED ]]; then
  echo "sample_variant_haplotype_caller (SAMPLE_BAM,GVCF,VCFFILE,HC_BAM_OUT,TARGET_BED) missing args"; return 42;
fi

let BUFFER=$JAVA_MEM*1048576;

#DAN: tmpfix for GATKv3.6 bug...eventually replace completely with 3.8 or even genpipes; added module load, cmd_prefix lines, commented old java command prefixes
module load gatk/3.8

cmd_prefix="java -Xmx${MAX_MEM}g -Djava.to.tmpdir=$TEMP_DIR -XX:ParallelGCThreads=1 -Dsamjdk.buffer_size=$BUFFER -jar $EBROOTGATK/GenomeAnalysisTK.jar"

echo "****** STARTING HaplotypeCaller"
#if [ $VERBOSE ]; then echo -e "****** sample_variant_haplotype_caller HaplotypeCaller CMD\n\
#java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -XX:ParallelGCThreads=1 -Dsamjdk.buffer_size=$BUFFER \
if [ $VERBOSE ]; then echo -e "****** sample_variant_haplotype_caller HaplotypeCaller CMD\n\
  $cmd_prefix \
  -T HaplotypeCaller \
  --emitRefConfidence GVCF --variant_index_type LINEAR --variant_index_parameter 128000 \
  -dt none \
  -nct 1 \
  -R $REF \
  --input_file $SAMPLE_BAM \
  --out $GVCF \
  --bamOutput $HC_BAM_OUT \
  --annotation HomopolymerRun --annotation TandemRepeatAnnotator --annotation StrandAlleleCountsBySample \
  --dbsnp $DBSNP"
fi
#java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -XX:ParallelGCThreads=1 -Dsamjdk.buffer_size=$BUFFER \
#  -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
$cmd_prefix \
  -T HaplotypeCaller \
  --emitRefConfidence GVCF --variant_index_type LINEAR --variant_index_parameter 128000 \
  -dt none \
  -nct 1 \
  -R $REF \
  --input_file $SAMPLE_BAM \
  --out $GVCF \
  --bamOutput $HC_BAM_OUT \
  --annotation HomopolymerRun --annotation TandemRepeatAnnotator --annotation StrandAlleleCountsBySample \
  --dbsnp $DBSNP

if [ $? -ne 0 ]; then echo "sample_variant_haplotype_caller problem HaplotypeCaller"; return 42; fi

echo "****** STARTING GenotypeGVCFs"
#if [ $VERBOSE ]; then echo -e "****** sample_variant_haplotype_caller GenotypeGVCFs CMD\n\
#java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -XX:ParallelGCThreads=1 -Dsamjdk.buffer_size=$BUFFER \
#  -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
if [ $VERBOSE ]; then echo -e "****** sample_variant_haplotype_caller GenotypeGVCFs CMD\n\
$cmd_prefix \
  -T GenotypeGVCFs \
  -nt 11 \
  --disable_auto_index_creation_and_locking_when_reading_rods \
  --annotation TandemRepeatAnnotator \
  -R $REF \
  --intervals $TARGET_BED \
  --variant $GVCF \
  --out $VCFFILE"
fi
#java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -XX:ParallelGCThreads=1 -Dsamjdk.buffer_size=$BUFFER \
#  -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
$cmd_prefix \
  -T GenotypeGVCFs \
  -nt 1 \
  --disable_auto_index_creation_and_locking_when_reading_rods \
  --annotation TandemRepeatAnnotator \
  -R $REF \
  --intervals $TARGET_BED \
  --variant $GVCF \
  --out $VCFFILE

if [ $? -ne 0 ]; then echo "sample_variant_haplotype_caller problem GenotypeGVCFs"; return 42; fi


}



sample_genome_variant_calling() {
##########################################
## VARIANT CALLING
echo "*** STARTING GENOME VARIANT CALLING"
##########################################

if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then echo "INIT SAMPLE FIRST"; return 42; fi
cd $RUN_DIR
local SAMPLE_BAM=$1
local SAMPLE_VARIANTS=$2
local DOWNSAMPLE_COV=$3
local DOWNSAMPLE_COV_COMMAND=
if [[ -z $SAMPLE_BAM || -z $SAMPLE_VARIANTS ]]; then
  echo "sample_genome_variant_calling (SAMPLE_BAM,SAMPLE_VARIANTS) missing args"; return 42;
fi
if [[ -n $DOWNSAMPLE_COV ]]; then DOWNSAMPLE_COV_COMMAND="--downsample_to_coverage $DOWNSAMPLE_COV"; fi

echo "****** STARTING UnifiedGenotyper"

if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T UnifiedGenotyper \
  -nt $THREADS \
  -R $REF \
  --input_file $SAMPLE_BAM \
  --out UnifiedGenotyper.$SAMPLE.vcf \
  --metrics_file UnifiedGenotyper.$SAMPLE.metrics \
  --dbsnp $DBSNP \
  --genotype_likelihoods_model BOTH \
  --annotation HomopolymerRun \
  $DOWNSAMPLE_COV_COMMAND" 
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T UnifiedGenotyper \
  -nt $THREADS \
  -R $REF \
  --input_file $SAMPLE_BAM \
  --out UnifiedGenotyper.$SAMPLE.vcf \
  --metrics_file UnifiedGenotyper.$SAMPLE.metrics \
  --dbsnp $DBSNP \
  --genotype_likelihoods_model BOTH \
  --annotation HomopolymerRun \
  $DOWNSAMPLE_COV_COMMAND  
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 1"; return 42; fi

echo "****** STARTING SelectVariants SNVs"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T SelectVariants \
  -R $REF \
  --variant UnifiedGenotyper.$SAMPLE.vcf \
  --out UnifiedGenotyper.$SAMPLE.SNPS.vcf \
  --selectTypeToInclude SNP"
fi
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T SelectVariants \
  -R $REF \
  --variant UnifiedGenotyper.$SAMPLE.vcf \
  --out UnifiedGenotyper.$SAMPLE.SNPS.vcf \
  --selectTypeToInclude SNP 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 2"; return 42; fi

echo "****** STARTING VariantRecalibrator SNP"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T VariantRecalibrator \
  -nt $THREADS \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.SNPS.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.SNPS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.SNPS.tranches \
  --use_annotation QD --use_annotation MQRankSum --use_annotation ReadPosRankSum --use_annotation FS --use_annotation DP \
  --resource:hapmap,known=false,training=true,truth=true,prior=15.0 $HAPMAP \
  --resource:omni,known=false,training=true,truth=false,prior=12.0 $OMNI \
  --resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $DBSNP \
  --mode SNP"
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T VariantRecalibrator \
  -nt $THREADS \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.SNPS.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.SNPS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.SNPS.tranches \
  --use_annotation QD --use_annotation MQRankSum --use_annotation ReadPosRankSum --use_annotation FS --use_annotation DP \
  --resource:hapmap,known=false,training=true,truth=true,prior=15.0 $HAPMAP \
  --resource:omni,known=false,training=true,truth=false,prior=12.0 $OMNI \
  --resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $DBSNP \
  --mode SNP 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 3"; return 42; fi

echo "****** STARTING ApplyRecalibration SNP"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T ApplyRecalibration \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.SNPS.vcf \
  --out UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.SNPS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.SNPS.tranches \
  --mode SNP"
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T ApplyRecalibration \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.SNPS.vcf \
  --out UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.SNPS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.SNPS.tranches \
  --mode SNP 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 4"; return 42; fi

echo "****** STARTING SelectVariants INDELS"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T SelectVariants \
  -R $REF \
  --variant UnifiedGenotyper.$SAMPLE.vcf \
  --out UnifiedGenotyper.$SAMPLE.INDELS.vcf \
  --selectTypeToInclude INDEL"
fi
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T SelectVariants \
  -R $REF \
  --variant UnifiedGenotyper.$SAMPLE.vcf \
  --out UnifiedGenotyper.$SAMPLE.INDELS.vcf \
  --selectTypeToInclude INDEL 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 5"; return 42; fi

echo "****** STARTING VariantRecalibrator INDELS"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T VariantRecalibrator \
  -nt $THREADS \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.INDELS.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.INDELS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.INDELS.tranches \
  --use_annotation QD --use_annotation DP --use_annotation FS --use_annotation ReadPosRankSum --use_annotation MQRankSum --use_annotation InbreedingCoeff \
  -resource:mills,known=false,training=true,truth=true,prior=12.0 $MILLS_KG \
  -resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $DBSNP \
  --mode INDEL"
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T VariantRecalibrator \
  -nt $THREADS \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.INDELS.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.INDELS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.INDELS.tranches \
  --use_annotation QD --use_annotation DP --use_annotation FS --use_annotation ReadPosRankSum --use_annotation MQRankSum --use_annotation InbreedingCoeff \
  -resource:mills,known=false,training=true,truth=true,prior=12.0 $MILLS_KG \
  -resource:dbsnp,known=true,training=false,truth=false,prior=2.0 $DBSNP \
  --mode INDEL 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 6"; return 42; fi

echo "****** STARTING ApplyRecalibration INDELS"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T ApplyRecalibration \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.INDELS.vcf \
  --out UnifiedGenotyper.$SAMPLE.INDELS.recalibrated.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.INDELS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.INDELS.tranches \
  --mode INDEL"
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T ApplyRecalibration \
  -R $REF \
  --input UnifiedGenotyper.$SAMPLE.INDELS.vcf \
  --out UnifiedGenotyper.$SAMPLE.INDELS.recalibrated.vcf \
  --recal_file UnifiedGenotyper.$SAMPLE.INDELS.recal \
  --tranches_file UnifiedGenotyper.$SAMPLE.INDELS.tranches \
  --mode INDEL 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 7"; return 42; fi

echo "****** STARTING CombineVariants"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T CombineVariants \
  -R $REF \
  --variant UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.vcf \
  --variant UnifiedGenotyper.$SAMPLE.INDELS.recalibrated.vcf \
  --out $SAMPLE_VARIANTS \
  --assumeIdenticalSamples"
fi
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T CombineVariants \
  -R $REF \
  --variant UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.vcf \
  --variant UnifiedGenotyper.$SAMPLE.INDELS.recalibrated.vcf \
  --out $SAMPLE_VARIANTS \
  --assumeIdenticalSamples 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 8"; return 42; fi

echo "****** PREPARING VariantEval Variants"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
awk 'BEGIN{FS=OFS=\"\t\"}{if ($1!~/^#/) print $1,$2,$3,$4,$5,$6,\"PASS\",$8\";set=\"$7; else print $1,$2,$3,$4,$5,$6,$7,$8}' UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.vcf > UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.eval_in.vcf"
fi
awk 'BEGIN{FS=OFS="\t"}{if ($1!~/^#/) print $1,$2,$3,$4,$5,$6,"PASS",$8";set="$7; else print $1,$2,$3,$4,$5,$6,$7,$8}' UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.vcf > UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.eval_in.vcf
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 9"; return 42; fi

echo "****** STARTING VariantEval"
if [ $VERBOSE ]; then echo -e "****** sample_genome_variant_calling CMD\n\
java -Xmx${JAVA_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T VariantEval \
  -R $REF \
  --eval UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.eval_in.vcf \
  --out UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.eval \
  --dbsnp $DBSNP \
  --evalModule CompOverlap --evalModule CountVariants --evalModule TiTvVariantEvaluator \  -select 'set==\"PASS\"' -selectName PASS \
  -select 'set==\"VQSRTrancheSNP99.00to99.90\"' -selectName VQSRTrancheSNP99.00to99.90 \  -select 'set==\"VQSRTrancheSNP99.90to100.00\"' -selectName VQSRTrancheSNP99.90to100.00 \
  --doNotUseAllStandardModules"
fi
java -Xmx${MAX_MEM}g -Djava.io.tmpdir=$TEMP_DIR -jar $GATK_DIR/dist/GenomeAnalysisTK.jar \
  -T VariantEval \
  -R $REF \
  --eval UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.eval_in.vcf \
  --out UnifiedGenotyper.$SAMPLE.SNPS.recalibrated.eval \
  --dbsnp $DBSNP \
  --evalModule CompOverlap --evalModule CountVariants --evalModule TiTvVariantEvaluator \
  -select 'set=="PASS"' -selectName PASS \
  -select 'set=="VQSRTrancheSNP99.00to99.90"' -selectName VQSRTrancheSNP99.00to99.90 \
  -select 'set=="VQSRTrancheSNP99.90to100.00"' -selectName VQSRTrancheSNP99.90to100.00 \
  --doNotUseAllStandardModules 
if [ $? -ne 0 ]; then echo "sample_genome_variant_calling() problem 10"; return 42; fi

}


sample_annotate_vcf() {
    echo "*** STARTING VARIANT ANNOTATION";
    if [ $FUNCTION_LIBRARY_INIT -ne 1 ]; then
        echo "INIT SAMPLE FIRST";
        return 42;
    fi;
    local SAMPLE_VARIANTS=$1;
    local BUILD=$2;
    local CALLER=$3;
    local ID=$4;
    if [[ -z $SAMPLE_VARIANTS || -z $BUILD || -z $CALLER ]]; then
        echo "sample_annotate_vcf (SAMPLE_VARIANTS,BUILD,CALLER) missing args";
        return 42;
    fi;
    if [[ -z $ID ]]; then
        ID=$SAMPLE;
    fi;
    if [ $VERBOSE ]; then
        echo -e "****** sample_genome_variant_calling CMD\n$PIPELINE_HOME/soft/packages/VarAnnot/vcf2annovar.pl -i $SAMPLE_VARIANTS -b v37 -vc $CALLER -id $ID --verbose --exclude esp6500aa,esp6500ea,nci60,snp132,1kg_amr,1kg_afr,1kg_eas,1kg_sas,1kg_eur,exac_amr,exac_afr,exac_eas,exac_sas,exac_fin,exac_nfe,exac_oth";
    fi;
    cd $RUN_DIR;
    $PIPELINE_HOME/soft/packages/VarAnnot/vcf2annovar.pl -i $SAMPLE_VARIANTS -b v37 -vc $CALLER -id $ID --verbose --exclude esp6500aa,esp6500ea,nci60,snp132,1kg_amr,1kg_afr,1kg_eas,1kg_sas,1kg_eur,exac_amr,exac_afr,exac_eas,exac_sas,exac_fin,exac_nfe,exac_oth
    if [ $? -ne 0 ]; then
        echo "sample_annotate_vcf() problem 1";
    fi
    bgzip $ID*RESULTS.vcf;
    if [ $? -ne 0 ]; then
        echo "sample_annotate_vcf() problem 2";
        return 42;
    fi;
    tabix $ID*RESULTS.vcf.gz;
    if [ $? -ne 0 ]; then
        echo "sample_annotate_vcf() problem 3";
        return 42;
    fi;
    return $?
}

